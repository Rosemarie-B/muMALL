%======================================================%
% General theorems in ŒºMALL
%======================================================%

% ‚àÄ\x. x eq x
rec equality_reflexivity : (Œ®:ctx) [Œ® ‚ä¢ mu (cons nil (‚àÄ \x. x eq x) ùüô)] =
[_ ‚ä¢ mu/‚àÄ upd/t
	(\y. (mu/eq upd/t (exh/c (exh/c exh/n hal/0) hal/0) nat/refl))
];

% ‚àÄ\x. 0 ‚â† suc(x)
rec zero_not_successor : (Œ®:ctx) [Œ® ‚ä¢ mu (cons nil (‚àÄ \x. zero ‚â† suc(A[x])) ùüô)] =
[_ ‚ä¢ mu/‚àÄ upd/t
	(\y. (mu/‚â† upd/t (exh/c (exh/c exh/n hal/0) hal/0) (neq/1 lt/z)))
];

% ‚àÄ\x.‚àÉ\y. x eq y
rec existsx_1_eq_x : (Œ®:ctx) [Œ® ‚ä¢ mu (cons nil (‚àÄ\x.(‚àÉ\y. x eq y)) ùüô)] =
[_ ‚ä¢ mu/‚àÄ upd/t
       (\a.(mu/‚àÉ refl upd/t
	  (mu/eq upd/t (exh/c (exh/c (exh/c exh/n hal/0) hal/0) hal/0) nat/refl)
       ))
];

% Weakening and contracting [ ‚ä¢ Œº(ŒªN. ‚ë† ‚äï (‚ë† ‚äó N)), ŒΩ(ŒªN'. ‚ä• & (‚ä• ‚Öã N'))], deriving itself
rec CW_example : (Œ®:ctx) {DU: [Œ® ‚ä¢ dual N[] N'[]]} {NEG: [Œ® ‚ä¢ neg N[]]} [Œ® ‚ä¢ mu (cons (cons nil (Œº0\N. ‚ë† ‚äï (‚ë† ‚äó N)) ùüô) (ŒΩ0\N'. ‚ä• & (‚ä• ‚Öã N')) ùüô)] = mlam DU, NEG ‚áí
[_ ‚ä¢ mu/C (NŒΩ0 NEG (N& N‚ä• (N‚Öã N‚ä• NEG))) upd/t
       (mu/W (NŒΩ0 NEG (N& N‚ä• (N‚Öã N‚ä• NEG))) upd/t
	   (mu/ŒºŒΩ0 ((DŒº0 DU (D‚äï D1 (D‚äó D1 DU)))) (upd/n (upd/n upd/t)) (upd/n upd/t) (exh/c (exh/c (exh/c exh/n hal/0) hal/0) hal/0))
       )
];

% Derivation of [ ‚ä¢ A, A'] with a cut removing [ ‚ä¢ A ‚äó A]
rec CW_cut_example : (Œ®:ctx) {DU: [Œ® ‚ä¢ dual A[] A'[]]} {NEG: [Œ® ‚ä¢ neg A'[]]} [Œ® ‚ä¢ mu (cons (cons nil A[] ùüô) A'[] ùüô)] = mlam DU, NEG ‚áí
[_ ‚ä¢ mu/cut (D‚äó DU DU) (mg/c (mg/c mg/n ‚Ä¢/01) ‚Ä¢/10)
       (mu/C NEG (upd/n upd/t)
	  (mu/‚äó (upd/n upd/t) (mg/c (mg/c (mg/c (mg/c mg/n ‚Ä¢/00) ‚Ä¢/10) ‚Ä¢/01) ‚Ä¢/01)
	     (mu/init DU (upd/n (upd/n (upd/n upd/t))) upd/t (exh/c (exh/c (exh/c (exh/c (exh/c exh/n hal/0) hal/0) hal/0) hal/0) hal/0))
	     (mu/init DU (upd/n upd/t) upd/t (exh/c (exh/c (exh/c (exh/c (exh/c exh/n hal/0) hal/0) hal/0) hal/0) hal/0))
	  )
       )
	  (mu/‚Öã upd/t
	     (mu/W NEG upd/t
		(mu/init DU (upd/n upd/t) (upd/n (upd/n (upd/n (upd/n upd/t)))) (exh/c (exh/c (exh/c (exh/c (exh/c exh/n hal/0) hal/0) hal/0) hal/0) hal/0))
	     )
	  )
];


% [ ‚ä¢ A ‚àß (B ‚à® C) ‚äÉ ((A ‚àß B) ‚à® (A ‚àß C))] translates to [ ‚ä¢(A' ‚Öã (B' & C')) ‚Öã ((A ‚äó B) ‚äï (A ‚äó C))]
rec tensor_distributivity : (Œ®:ctx) {DUA: [Œ® ‚ä¢ dual A[] A'[]]} {DUB: [Œ® ‚ä¢ dual B[] B'[]]} {DUC: [Œ® ‚ä¢ dual C[] C'[]]} [Œ® ‚ä¢ mu (cons nil ((A'[] ‚Öã (B'[] & C'[])) ‚Öã ((A[] ‚äó B[]) ‚äï (A[] ‚äó C[])))  ùüô)] = mlam DUA, DUB, DUC ‚áí
[_ ‚ä¢ mu/‚Öã upd/t
       (mu/‚Öã upd/t
	  (mu/& (upd/n upd/t)
	     (mu/‚äïl (upd/n(upd/n(upd/n(upd/n upd/t))))
		(mu/‚äó upd/t (mg/c (mg/c (mg/c (mg/c (mg/c (mg/c (mg/c mg/n ‚Ä¢/00) ‚Ä¢/00) ‚Ä¢/00) ‚Ä¢/00) ‚Ä¢/10) ‚Ä¢/01) ‚Ä¢/01)
		   (mu/init DUA (upd/n(upd/n(upd/n upd/t))) upd/t (exh/c (exh/c (exh/c (exh/c (exh/c (exh/c (exh/c (exh/c exh/n hal/0) hal/0) hal/0) hal/0) hal/0) hal/0) hal/0) hal/0))
		    (mu/init DUB (upd/n(upd/n upd/t)) upd/t (exh/c (exh/c (exh/c (exh/c (exh/c (exh/c (exh/c (exh/c exh/n hal/0) hal/0) hal/0) hal/0) hal/0) hal/0) hal/0) hal/0))
		)
	     )
	     (mu/‚äïr (upd/n(upd/n(upd/n(upd/n upd/t))))
		(mu/‚äó upd/t (mg/c (mg/c (mg/c (mg/c (mg/c (mg/c (mg/c mg/n ‚Ä¢/00) ‚Ä¢/00) ‚Ä¢/00) ‚Ä¢/00) ‚Ä¢/10) ‚Ä¢/01) ‚Ä¢/01)
		   (mu/init DUA (upd/n(upd/n(upd/n upd/t))) upd/t (exh/c (exh/c (exh/c (exh/c (exh/c (exh/c (exh/c (exh/c exh/n hal/0) hal/0) hal/0) hal/0) hal/0) hal/0) hal/0) hal/0))
		   (mu/init DUC (upd/n(upd/n upd/t)) upd/t (exh/c (exh/c (exh/c (exh/c (exh/c (exh/c (exh/c (exh/c exh/n hal/0) hal/0) hal/0) hal/0) hal/0) hal/0) hal/0) hal/0))
		)
	     )
	  )
       )
];

% [ ‚ä¢ Œº(ŒªM. ‚ä• & M), ŒΩ(ŒªN. ‚ë† ‚äï (‚ë† ‚äï N))]
rec ŒºŒΩ_example : (Œ®:ctx) {DU: [Œ® ‚ä¢ dual B[] B'[]]} [Œ® ‚ä¢ mu (cons (cons nil (Œº0\B. ‚ä• & B) ùüô) (ŒΩ0\B'. ‚ë† ‚äï (‚ë† ‚äï B')) ùüô) ] = mlam DU ‚áí
[_ ‚ä¢ mu/ŒΩ0ex upd/t (D‚äï D1 (DŒΩ0 DU (D‚äï D1 DU)))
       (mu/‚äïr upd/t
	  (mu/ŒºŒΩ0 (DŒº0 DU (D& D‚ä• DU)) (upd/n(upd/n(upd/n upd/t))) upd/t (exh/c (exh/c (exh/c (exh/c exh/n hal/0) hal/0) hal/0) hal/0)))
       (mu/‚äïr (upd/n upd/t)
	  (mu/‚äïr (upd/t)	
             (mu/init (D‚äï D1 (DŒΩ0 DU (D‚äï D1 DU))) (upd/n (upd/n upd/t)) upd/t (exh/c (exh/c (exh/c (exh/c exh/n hal/0) hal/0) hal/0) hal/0))
	  )
       )
];

% [ ‚ä¢ Œº(ŒªB. 1 ‚äó B), ‚ä§]
% Œº can be unfolded an arbitrary number n times, creating n branches containing ‚ë†.
% Termination is forced with ‚ä§.
rec top_termiation : (Œ®:ctx) [Œ® ‚ä¢ mu (cons (cons nil (Œº0\B. ‚ë† ‚äó B) ùüô) ‚ä§ ùüô) ] =
[_ ‚ä¢ mu/Œº0 (upd/n upd/t)
       (mu/‚äó upd/t (mg/c (mg/c (mg/c mg/n ‚Ä¢/00) ‚Ä¢/01) ‚Ä¢/01)
	  (mu/‚ë† upd/t (exh/c (exh/c (exh/c (exh/c exh/n hal/0) hal/0) hal/0) hal/0))
	  (mu/‚ä§ (upd/n (upd/n upd/t)))
       )
];
